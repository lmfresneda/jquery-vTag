!function(e){"use strict";e.vTag={rule:function(t,r,n){var a=!0,s=this.getRule(t),u=function(){if(!moment)throw new Error(e.fn.vTag.lang[e.fn.vTag.defaults.lang].moment_not_found)};if(!this.isRule(s))throw new Error("vTag.valid.rule");switch(s){case"required":a=e(n).is(":checkbox")||e(n).is(":radio")?e(n).is(":checked"):e(n).is("select")?null!=r&&""!=r:""!=r;break;case"notwhitespaces":a=-1==r.indexOf(" ");break;case"enum":var i=this.getArguments(t).split(",");-1==e.inArray(e.trim(r),i)&&(a=!1);break;case"digits":var l=this.helper.RegExp.digits();if(a=l.test(r),a&&t.indexOf("(")>-1){var g=this.getArguments(t);a=r.length==g}break;case"number":var l=this.helper.RegExp.number();a=l.test(r);break;case"rangenumbers":var o=this.getArguments(t),h=e.trim(o.split(",")[0]),m=e.trim(o.split(",")[1]);a=r>=parseInt(h)&&r<=parseInt(m);break;case"rangeletters":var o=this.getArguments(t),h=e.trim(o.split(",")[0]).charAt(0),m=e.trim(o.split(",")[1]).charAt(0),d="^["+h+"-"+m+"]$",l=new RegExp(d);a=l.test(r);break;case"rangecharcode":for(var o=this.getArguments(t),h=e.trim(o.split(",")[0]),m=e.trim(o.split(",")[1]),F=0,c=0,v=0,f=0;f<h.length;f++)F+=h.charCodeAt(f);for(var p=0;p<m.length;p++)c+=m.charCodeAt(p);for(var b=0;b<r.length;b++)v+=r.charCodeAt(b);a=v>h&&c>v;break;case"rangelength":var o=this.getArguments(t),k=e.trim(o.split(",")[0]),x=e.trim(o.split(",")[1]);a=r.length>=k&&r.length<=x;break;case"min":var A=this.getArguments(t);if(A.split(";").length>1){u();var E=A.split(";")[0],D=this.helper.Format[E],_=A.split(";")[1];if(A.split(";").length>2&&(D=A.split(";")[2]),this.customdate(r,D)&&this.customdate(_,D)){var R=moment(r,D)._d,T=moment(_,D)._d;a=R&&T?R.getTime()>=T.getTime():!1}else a=!1}else if(this.number(r)){var C=parseFloat(A);parseFloat(r)<C&&(a=!1)}else a=!1;break;case"positive":this.number(r)?parseFloat(r)<=0&&(a=!1):a=!1;break;case"max":var A=this.getArguments(t);if(A.split(";").length>1){u();var E=A.split(";")[0],D=this.helper.Format[E],_=A.split(";")[1];if(A.split(";").length>2&&(D=A.split(";")[2]),this.customdate(r,D)&&this.customdate(_,D)){var R=moment(r,D)._d,T=moment(_,D)._d;a=R&&T?R.getTime()<=T.getTime():!1}else a=!1}else if(this.number(r)){var w=parseFloat(A);parseFloat(r)>w&&(a=!1)}else a=!1;break;case"negative":this.number(r)?parseFloat(r)>=0&&(a=!1):a=!1;break;case"email":var l=this.helper.RegExp.email();a=l.test(r);break;case"url":var l=this.helper.RegExp.url();a=l.test(r);break;case"phonenumber":var l=this.helper.RegExp.phone();r=r.replace(/ /g,"").replace(/\(/g,"").replace(/\)/g,"").replace(/\-/g,""),r=parseInt(r),a=isNaN(r)?!1:l.test(r);break;case"date":if(-1==t.indexOf("(")){var l=this.helper.RegExp.date();a=l.test(r)}else u(),a=this.customdate(this.getRule(t),this.getArguments(t));break;case"time":if(-1==t.indexOf("(")){var l=this.helper.RegExp.time();a=l.test(r)}else u(),a=this.customdate(this.getRule(t),this.getArguments(t));break;case"datetime":if(-1==t.indexOf("(")){var $=this.helper.RegExp.date(),S=this.helper.RegExp.time(),z=r.split(" ")[0],O=r.split(" ")[1];a=$.test(z)&&S.test(O)}else u(),a=this.customdate(this.getRule(t),this.getArguments(t));break;case"customdate":u();var Y=this.getArguments(t),q=moment(r,Y)._pf;a=null==q||void 0==q?!1:!(null!=q.unusedTokens&&void 0!=q.unusedTokens&&0!=q.unusedTokens.length||null!=q.unusedInput&&void 0!=q.unusedInput&&0!=q.unusedInput.length);break;case"minlength":var g=this.getArguments(t);a=r.length>=g;break;case"maxlength":var g=this.getArguments(t);a=r.length<=g;break;case"equal":var _=this.getArguments(t);a=r==_;break;case"notequal":var _=this.getArguments(t);a=r!=_;break;case"startwith":var L=this.getArguments(t);a=r.substr(0,L.length)==L;break;case"endwith":var y=this.getArguments(t);a=r.substr(r.length-y.length)==y;break;case"contain":var _=this.getArguments(t);a=r.indexOf(_)>-1;break;case"notcontain":var _=this.getArguments(t);a=-1==r.indexOf(_);break;case"regexp":var M=this.getArguments(t),I=0;0==M.indexOf("/")&&(I=1);var U=M.length,j=!1;M.indexOf("/",M.length-2)>0&&(U=M.indexOf("/",M.length-2),M.length-U==2?j=!0:M.length-U==1&&(j=!1));var H=M.substring(I,U),l=null;if(j){var G=M.substring(M.indexOf("/",M.length-2),M.length).replace(/\//g,"");l=new RegExp(H,G)}else l=new RegExp(H);a=l.test(r);break;default:a=!1}return a},getRules:function(){return["required","notwhitespaces","enum","digits","number","rangenumbers","rangeletters","rangecharcode","rangelength","positive","negative","min","max","minlength","maxlength","equal","notequal","startwith","endwith","contain","notcontain","regexp","date","time","datetime","customdate","email","url","phonenumber"]},getArguments:function(t){return t.indexOf("(")>-1?e.trim(t.substring(t.indexOf("(")+1,t.length-1)):""},getRule:function(t){return e.trim(t.split("(")[0])},isRule:function(t){return e.inArray(this.getRule(t),this.getRules())>-1},notWhiteSpaces:function(e){var t="notwhitespaces";return this.rule(t,e)},_enum:function(e,t){var r="enum("+t.join(",")+")";return this.rule(r,e)},digits:function(e,t){var r="digits";return t&&this.rule("digits",t)&&(r+="("+t+")"),this.rule(r,e)},rangenumbers:function(e,t,r){var n="rangenumbers("+t+","+r+")";return this.rule(n,e)},rangeletters:function(e,t,r){var n="rangeletters("+t+","+r+")";return this.rule(n,e)},rangecharcode:function(e,t,r){var n="rangecharcode("+t+","+r+")";return this.rule(n,e)},rangelength:function(e,t,r){var n="rangelength("+t+","+r+")";return this.rule(n,e)},min:function(e,t){var r="min("+t+")";return this.rule(r,e)},max:function(e,t){var r="max("+t+")";return this.rule(r,e)},minDate:function(e,t,r,n){var a="min("+t+";"+r;return n&&""!=n&&(a+=";"+n),a+=")",this.rule(a,e)},maxDate:function(e,t,r,n){var a="max("+t+";"+r;return n&&""!=n&&(a+=";"+n),a+=")",this.rule(a,e)},positive:function(e){var t="positive";return this.rule(t,e)},negative:function(e){var t="negative";return this.rule(t,e)},minlength:function(e,t){var r="minlength("+t+")";return this.rule(r,e)},maxlength:function(e,t){var r="maxlength("+t+")";return this.rule(r,e)},equal:function(e,t){var r="equal("+t+")";return this.rule(r,e)},notEqual:function(e,t){var r="notequal("+t+")";return this.rule(r,e)},startWith:function(e,t){var r="startwith("+t+")";return this.rule(r,e)},endWith:function(e,t){var r="endwith("+t+")";return this.rule(r,e)},contain:function(e,t){var r="contain("+t+")";return this.rule(r,e)},notContain:function(e,t){var r="notcontain("+t+")";return this.rule(r,e)},email:function(e){return this.rule("email",e)},url:function(e){return this.rule("url",e)},phonenumber:function(e){return this.rule("phonenumber",e)},number:function(e){return this.rule("number",e)},date:function(e){return this.rule("date",e)},time:function(e){return this.rule("time",e)},dateTime:function(e){return this.rule("datetime",e)},customdate:function(e,t){var r="customdate("+t+")";return this.rule(r,e)},clearValidations:function(){e("*").removeClass("validation")},helper:{RegExp:{email:function(){return new RegExp(/^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/)},url:function(){return new RegExp(/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i)},number:function(){return new RegExp(/^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/)},date:function(){return new RegExp(/^(((0[1-9]|[12][0-9]|3[01])([/-])(0[13578]|10|12)([/-])(\d{4}))|(([0][1-9]|[12][0-9]|30)([/-])(0[469]|11)([/-])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([/-])(02)([/-])(\d{4}))|((29)(\.|-|\/)(02)([/-])([02468][048]00))|((29)([/-])(02)([/-])([13579][26]00))|((29)([/-])(02)([/-])([0-9][0-9][0][48]))|((29)([/-])(02)([/-])([0-9][0-9][2468][048]))|((29)([/-])(02)([/-])([0-9][0-9][13579][26])))$/)},time:function(){return new RegExp(/^((0[0-9]|1[0-9]|2[0-4])([:])([0-5][0-9])|(0[0-9]|1[0-9]|2[0-4])([:])([0-5][0-9])([:])([0-5][0-9]))$/)},digits:function(){return new RegExp(/^\d+$/)},phone:function(){return new RegExp(/^([6789]\d{8})$/)}},Format:{date:"DD/MM/YYYY",time:"HH:mm:ss",datetime:"DD/MM/YYYY HH:mm:ss"}}},e.fn.vTag=function(t){t=t||{};var t=e.extend({},e.fn.vTag.defaults,t);String.__format||(String.__format=function(){for(var e=arguments[0],t=0;t<arguments.length-1;t++){var r=new RegExp("\\{"+t+"\\}","gm");e=e.replace(r,arguments[t+1])}return e});var r=function(t,r,n){n&&t.ok?(e(r).addClass(t.ok),t.error&&e(r).removeClass(t.error)):!n&&t.error&&(e(r).addClass(t.error),t.ok&&e(r).removeClass(t.ok))},n=function(t,r,n){if(e(r).siblings("span").filter(".vtag-ok, .vtag-error").remove(),n&&t.visible_result.ok){var a=e(r).attr("data-vtag-ok")?e(r).attr("data-vtag-ok"):e.fn.vTag.lang[t.lang].str_ok,s=t.visible_format.replace(/\$STYLE_RESULT/g,t.styles.str_ok).replace(/\$MSG_RESULT/g,a);e(s).insertAfter(r).addClass("vtag-ok")}else if(!n&&t.visible_result.error){var a=e(r).attr("data-vtag-error")?e(r).attr("data-vtag-error"):e.fn.vTag.lang[t.lang].str_error,s=t.visible_format.replace(/\$STYLE_RESULT/g,t.styles.str_error).replace(/\$MSG_RESULT/g,a);e(s).insertAfter(r).addClass("vtag-error")}};return this.each(function(){for(var a=e(this),s=a.find("input[data-vtag], select[data-vtag]").toArray(),u=[],i=0;i<s.length;i++){for(var l=s[i],g=e(l).attr("data-vtag").split("#"),o=!0,h="",m=0;m<g.length;m++){var d=g[m],F=(e.vTag.getRule(d),!0);if(F=e.vTag.rule(d,e(l).val(),l),!F){o=F;break}}t.classes&&r(t.classes,l,o),n(t,l,o),h=F?e(l).attr("data-vtag-ok")?e(l).attr("data-vtag-ok"):h:e(l).attr("data-vtag-error")?e(l).attr("data-vtag-error"):h,u.push({field:l,result:o,txt_error:h})}t.resultCallback&&e.isFunction(t.resultCallback)&&t.resultCallback(u)})},e.fn.vTag.defaults={lang:"es",visible_result:{ok:!1,error:!1},visible_format:"<span style='$STYLE_RESULT'>$MSG_RESULT</span>",styles:{str_ok:"color: #07E461; margin: 2px;",str_error:"color: #F95A5A; margin: 2px;"}},e.fn.vTag.lang={},e.fn.vTag.lang.es={str_ok:"Campo validado",str_error:"Campo no válido",moment_not_found:"Librería 'moment.js' no encontrada. Visite http://momentjs.com/"}}(jQuery);
//# sourceMappingURL=data:application/json;base64,